import{a as y}from"./chunk-ZGEJ7KGT.mjs";import"./chunk-K7C7TUE5.mjs";import b from"cap";import{isIPv4 as I}from"net";import{TypedEmitter as w}from"tiny-typed-emitter";import{EventEmitter as l}from"stream";import{EventEmitter as E}from"stream";var m=65536,d=class extends E{next_id=-1;stored={};track(t,s,e){if(this.next_id===-1&&this.set_current_id(s.info.id),Math.abs(this.next_id-s.info.id)>=10&&this.increment_id(),this.stored[s.info.id]={packet:t,ip:s,tcp:e},this.next_id in this.stored){let r=this.stored[this.next_id];for(;r!==void 0;)this.emit("segment",r.packet,r.ip,r.tcp),delete this.stored[this.next_id],this.increment_id(),r=this.stored[this.next_id]}console.log(s.info.id,this.next_id,s.info.id===this.next_id,Object.keys(this.stored))}increment_id(){this.next_id=(this.next_id+1)%m}set_current_id(t){this.next_id=t%m}set_next_id(t){this.next_id=(t+1)%m}};var u=class extends l{sessions;listen_options;constructor(t){super(),this.sessions={},this.listen_options=t,l.call(this)}track_packet(t,s,e){let r=s.info.srcaddr+":"+e.info.srcport,n=s.info.dstaddr+":"+e.info.dstport,o;r<n?o=r+"-"+n:o=n+"-"+r;let f=!1,i=this.sessions[o];if(!i){if(!(e.info.flags&8)&&!(e.info.flags&2))return;f=!0,i=new h(this.listen_options),this.sessions[o]=i,i.on("end",()=>{delete this.sessions[o],console.info(`[meter-core/tcp-tracker] - Remove session ${i?.src}->${i?.dst} (Total: ${Object.keys(this.sessions).length})`)})}i.track(t,s,e),f&&this.emit("session",i)}},h=class extends l{state;src;dst;send_seqno;send_buffers;recv_seqno;recv_buffers;listen_options;is_ignored;packetBuffer;send_ip_tracker;recv_ip_tracker;skip_socks5;in_handshake;constructor(t){super(),this.listen_options=t,this.state="NONE",this.send_seqno=0,this.send_buffers=[],this.recv_seqno=0,this.recv_buffers=[],this.is_ignored=!1,this.packetBuffer=new y,this.send_ip_tracker=new d,this.recv_ip_tracker=new d,this.send_ip_tracker.on("segment",this.handle_send_segment.bind(this)),this.recv_ip_tracker.on("segment",this.handle_recv_segment.bind(this)),this.skip_socks5=0,this.in_handshake=!0,l.call(this)}track(t,s,e){let r=s.info.srcaddr+":"+e.info.srcport,n=s.info.dstaddr+":"+e.info.dstport;if(this.state==="NONE"){let o=P(s.info.srcaddr,this.listen_options),f=P(s.info.dstaddr,this.listen_options);o&&this.listen_options.port===e.info.dstport?(this.src=r,this.dst=n):this.listen_options.port===e.info.srcport&&f?(this.src=n,this.dst=r):!o&&!f?this.listen_options.port===e.info.dstport?(this.src=r,this.dst=n):this.listen_options.port===e.info.srcport?(this.src=n,this.dst=r):(this.src=r,this.dst=n,this.is_ignored=!0):(this.src=r,this.dst=n,this.is_ignored=!0),this.state="ESTAB"}e.info.flags&4||e.info.flags&1?(this.ESTAB(t,s,e),this.emit("end",this)):this.ESTAB(t,s,e)}ESTAB(t,s,e){if(this.is_ignored)return;let r=s.info.srcaddr+":"+e.info.srcport;r===this.src?this.handle_recv_segment(t,s,e):r===this.dst?this.handle_send_segment(t,s,e):console.error("[meter-core/tcp_tracker] - non-matching packet in session: ip="+s+"tcp="+e)}flush_buffers(t,s){if(s==="recv"){this.recv_seqno===0&&(this.recv_seqno=t);let e=h.get_flush(this.recv_buffers,this.recv_seqno,t);if(!e)return;if(this.recv_seqno=t,this.in_handshake&&e.length===2&&e.equals(Buffer.from([5,2]))&&(this.skip_socks5=4),this.skip_socks5>0){this.skip_socks5--;return}this.in_handshake=!1,this.packetBuffer.write(e);let r;for(;r=this.packetBuffer.read();)this.emit("payload_recv",r)}}static get_flush(t,s,e){let r=e-s;if(r<=0)return null;let n=Buffer.alloc(r),o=Buffer.alloc(r),f=t.filter(i=>{if(i.seqno>e)return!0;if(i.seqno<s){if(i.seqno+i.payload.length<s)return!1;i.payload=i.payload.subarray(s-i.seqno),i.seqno=s}let p=i.seqno-s,a=Math.min(e-i.seqno,i.payload.length);return i.payload.copy(n,p,0,a),o.fill(1,p,p+a),a<i.payload.length?(i.payload=i.payload.subarray(a),i.seqno+=a,!0):!1});return o.includes(0)?t.length>=50?(console.warn(`[meter-core/tcp_tracker] - Dropped ${r} bytes`),Buffer.alloc(0)):null:(t.length=0,t.push(...f),n)}handle_recv_segment(t,s,e){let r=s.info.totallen-s.hdrlen-e.hdrlen,n=!1;try{n=g(t,s,e)}catch(o){console.error(o);return}r>0&&this.send_buffers.push({seqno:e.info.seqno,payload:Buffer.from(t.subarray(e.offset,e.offset+r))}),e.info.ackno&&!n&&this.flush_buffers(e.info.ackno??0,"recv")}handle_send_segment(t,s,e){let r=s.info.totallen-s.hdrlen-e.hdrlen,n=!1;try{n=g(t,s,e)}catch(o){console.error(o);return}r>0&&this.recv_buffers.push({seqno:e.info.seqno,payload:Buffer.from(t.subarray(e.offset,e.offset+r))}),e.info.ackno&&!n&&this.flush_buffers(e.info.ackno??0,"send")}};function g(c,t,s){if(s.hdrlen==20)return!1;let e=t.offset+20,r=s.hdrlen-20,n=e+r;for(;e<n;)switch(c[e]){case 0:e=n;break;case 1:e+=1;break;case 2:e+=4;break;case 3:e+=3;break;case 4:e+=2;break;case 5:return!0;case 8:e+=10;break;case 254:case 255:e+=c[e+1]??1;break;default:throw new Error(`[meter-core/tcp-tracker] - Unknown TCPOption ${c[e]}, packet is probably malformed, should drop.`)}return!1}function _(c){var t=c.match(/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/);return t&&t.length===5?(+t[1]<<24)+(+t[2]<<16)+(+t[3]<<8)+ +t[4]:null}function P(c,t){let s=_(c),e=_(t.ip),r=_(t.mask);return!s||!e||!r?!1:(s&r)===(e&r)}var{findDevice:X,deviceList:T}=b.Cap,{Ethernet:C,PROTOCOL:B,IPV4:O,TCP:L}=b.decoders;var k=class extends w{tcpTracker;device;port;constructor(t,s){super(),this.device=t,this.port=s.port,this.tcpTracker=new u(s),this.tcpTracker.on("session",e=>{console.info(`[meter-core/pkt-capture] - New session ${e.src}->${e.dst} ${e.is_ignored?"(ingored) ":""}(Total: ${Object.keys(this.tcpTracker.sessions).length})`),e.on("payload_recv",r=>{this.emit("packet",r)}),e.dst&&this.emit("connect",e.dst)})}dispatchPacket(t){let s=C(t);if(s.info.type===B.ETHERNET.IPV4){let e=O(t,s.offset);if(e.info.protocol===B.IP.TCP){let r=L(t,e.offset);this.tcpTracker.track_packet(t,e,r)}}}},v=class extends k{c;#e;constructor(t,s){super(t,s),this.c=new b.Cap,this.#e=Buffer.alloc(65535)}listen(){let t=this.c.open(this.device,`tcp and (src port ${this.port} or dst port ${this.port})`,10485760,this.#e);this.c.setMinBytes&&this.c.setMinBytes(54),this.c.on("packet",(s,e)=>{if(t==="ETHERNET")this.dispatchPacket(this.#e);else if(t==="NULL"&&this.device==="\\Device\\NPF_Loopback"){if(this.#e.readUInt32LE()!==2)return;this.dispatchPacket(this.#e.subarray(4))}})}close(){this.c.close()}},q=(t=>(t[t.MODE_PCAP=0]="MODE_PCAP",t))(q||{}),x=class extends w{captures;constructor(t,s=6040){if(super(),this.captures=new Map,$(t)||(console.warn("[meter-core/PktCaptureAll] - Couldn't restart as admin, fallback to pcap mode, consider starting as admin yourself."),t=0),t===0){for(let e of T())for(let r of e.addresses)if(r.addr&&r.netmask&&I(r.addr))try{let n=new v(e.name,{ip:r.addr,mask:r.netmask,port:s});n.on("packet",o=>this.emit("packet",o,e.name)),n.on("connect",o=>this.emit("connect",o,e.name)),this.captures.set(e.name,n),n.listen()}catch(n){console.error(`[meter-core/PktCaptureAll] ${n}`)}}}close(){for(let t of this.captures.values())t.close()}};function $(c){return!0}export{x as PktCaptureAll,q as PktCaptureMode,$ as adminRelauncher,T as deviceList,X as findDevice};
